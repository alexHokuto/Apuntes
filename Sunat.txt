https://192.168.1.99/svn/comun
https://192.168.1.99/svn/comun
Te envío tus accesos al repositorio SVN: - Dashboard
usuario: cmorales
clave: Cos123$$

Site bueno miraflores
Site podrido San Isidro

correo
martes.12345

192.168.1.192
sunat
#1234ps

MUSR_MQADMIN     usuario colas
$cosapi123

git sunat
etaboada@sunat.gob.pe
Cosapi123$$

192.168.1.159
mqm
mqmadmin

bamboo
http://bamboo.pu.sunat.gob.pe/allPlans.action
root
Cosapi123$$

http://artifactory.pu.sunat.gob.pe
admin
password

http://gitlab.pu.sunat.gob.pe/
root
muysecreto

\\192.168.1.192\Sunat\1-Gstion\1.4-Sgmnto_Cntrol\Ctrl_Hras\Timesheet
\\192.168.1.99\qa\Ejecución\Iteracion 2 Calidad\Consolidado de Incidencias
\\192.168.1.192\Sunat\2-Ingnria\2.2 Dsrllo Sftwre\3  Dsño_Sstema\2_DSI\P7_Psrla_Pgos
\\192.168.1.192\Sunat\2-Ingnria\2.2 Dsrllo Sftwre\4  Cnstrccion\12 Entreg_Construc\CD-EntregaSUNAT\3 Pase a Producción\Scripts_BD


******* Microservicio
gradlew.bat jettyRunWar
gradlew.bat prepareApp
java  -Duser.timezone="America/Lima" -jar service.jar server config.yaml
./gradlew clean build -x check && java -jar build/libs/service.jar server src/main/resources/config_ddst.yaml


	gradlew
	gradlew clean build -x check
	gradlew tasks --all
	gradlew publishMavenJavaPublicationToMavenLocal
	gradlew dependencies

	Publicar Local
	-- Bajar el proyecto
	-- modicar
	-- gradle.properties colocar un alias version=3.0.26-SNAPSHOT
	-- gradlew clean build -x check
	-- ./gradlew publishMavenJavaPublicationToMavenLocal
	-- ir al proyecto que requiere la nueva version
	-- build.gradle  colocar mavenLocal() en el bloque repositories {}
	-- build.gradle actualizar la version con el alias


	Generar version de persistencias manual
	-- crear tu branch
	-- checkout merge
	-- merge tu branch
	-- push release
	-- gradle clean release --stacktrace
	-- checkout master
	-- merge  release
	-- push master





******* GIT
cmorales
cmorales21
D:\AMV\WS-SUNAT\GIT>git clone http://glv.cosapidata.com.pe/sunat/MS022-OrquestacionProxyPago.git

git checkout master
git checkout -b cmorales
git status
git add src
git commit -m "actualizacion de query"
git remote -v
git push origin cmorales

git branch

revertir commit
git revert "commit-id"
To get the commit ID, just use git log

use branch release
git merge master (Estas trayendo todos los cambios de master a release)


****** Java 
Map<String, Object> mapSunatBanco = new HashMap<>();

List<Object[]> rows = query.getResultList();
List<MyObject> result = new ArrayList<>(rows.size());
for (Object[] row : rows) {
    result.add(new MyObject((String) row[0],
                            (Long) row[1],
                            ...));
}

log.info( "idTransaccion: [{}], CodigoRespuesta: [{}], mensajeRespuesta: [{}] ", new Object[]{ idTransaccion, codRespuesta, mensajeRespuesta } );


Generar version manual
hacer cambios en tu branch
merge al release
push
./gradlew clean release
merge al master
push

******** Kubernetes
ssh percy@192.168.1.159   o 10.253.1.60 es otra IP del mismo equipo

sftp 22
kubernetes
192.168.1.159
usuario percy
clave secreto

cd /home/percy/microservicios
		 

192.168.251.35
root
ServerCosapi
/root/microservices
kubectl delete -f orquestacion-proxy-pago/
kubectl apply -f orquestacion-proxy-pago/
kubectl delete -f orquestacion-presentacion/
kubectl apply -f orquestacion-presentacion/
watch kubectl get pods
kubectl log -f orquestacion-proxy-pago-2025000862-9tt85 --tail=500


cd microservices
Kubernetes
1.- Todo esta en la percy@192.168.1.59 secreto
	/home/percy/nuevo_pase_sunat/MS022-OrquestacionProxyPago
	git pull; 
	gradle clean pushImage -x check


2.  Aactualizar config.yaml
  cd -- 
    /home/percy/work/git/microservices/microservices-config/config/qa/orquestacion-proxy-pago
    nano config.yaml
    cd /home/percy/work/git/microservices/microservices-config/bin
    ./qa_update.sh


3.- Ingresar al k8s QA root@192.168.251.35  S3rv3rCosapi
	cd microservices
	kubectl delete -f orquestacion-proxy-pago/; kubectl apply -f orquestacion-proxy-pago/ --record; 
	kubectl delete -f orquestacion-presentacion/; kubectl apply -f orquestacion-presentacion/ --record;
	kubectl delete -f parametria-pasarela/; kubectl apply -f parametria-pasarela/ --record;

	kubectl set image deployments/orquestacion-proxy-pago orquestacion-proxy-pago=hubqa.sunat.gob.pe/microservices/recaudacion3-tributaria-administracion-orquestacionproxypago-backend:1.0.2
	kubectl set image deployments/orquestacion-presentacion orquestacion-presentacion=hubqa.sunat.gob.pe/microservices/recaudacion3-tributaria-administracion-orquestacionpresentacion-backend:1.0.2

	kubectl delete -f formulario-igv/; kubectl apply -f formulario-igv/; kubectl set image deployments/formulario-igv formulario-igv=hubqa.sunat.gob.pe/microservices/recaudacion3-tributaria-administracion-formularioigv-backend:1.0.2	

kubectl scale --replicas=3 parametria-pasarela

****** Pagos
Colas
192.168.251.24
sftp 192.168.251.44
put #archivo

ssh root@192.168.251.44
S3rv3rCosapi

su - MUSR_MQADMIN     usuario colas
$cosapi123 -- no vale

tail -f 400 sunat.log

cosapi - calidad - qa
$$123qa
cp config.yaml /home/MUSR_MQADMIN/test_six/
cp service.jar /home/MUSR_MQADMIN/test_six/

SIX
El servidor SIX Calidad es 192.168.40.9 por los puertos 1099, 33339


Log QA
192.168.251.28
root/microservices
kubectl get pods
kubectl logs -f orquestacion-proxy-pago-rc-737xg

VISA
http://localhost:7121/v1/recaudacion/tributaria/orquestacionprocesaendpointpago/t/transaccionvisa?numTransApliCli=1004085660&numPas=1&numPas=1&numMedPagPas=1&codTipmon=01&codMedpag=41&codEntFin=67&tipoOperacion=1&codTipSer=01&mtoOpe=45&codMedPre=01&codAplCli=01&returnUrl=http://localhost/v1/recaudacion/tributaria/orquestacionprocesaendpointpago/t/respuestavisa%26&_=1489440601861


******** Aplicativo
Ingresar por ruc
20100049181
PEHFYMCG

20314548249
CNAVARRO

https://jslibs1.sunat.gob.pe/bootstrap/3.3.4/css/bootstrap.min.css
https://img1.sunat.gob.pe/xs/logo.png

return (String) jpaT7777bandprespagoDAO.createNativeQuery("select cast(arc_data::json as lvarchar) from t7777bandprespago where num_bandeja=" + numBandeja + ";").getSingleResult();

#Sapia
#distributionUrl=https\://services.gradle.org/distributions/gradle-4.0-bin.zip
#Sunat
distributionUrl=http\://artifactory.insi.sunat.peru:7003/artifactory/desarrollo-release-local/distributions/gradle-4.0-bin.zip

ps -eaf | grep gestor
kill -9 8447

TipoPago por banco 2
TipoPago por tarjeta 1

		 UsuarioBean usuarioBean = new UsuarioBean();
		 usuarioBean.setCodDepend("0073");
		 usuarioBean.setNumRUC("20100049181");
		 usuarioBean.setUsuarioSOL("PEHFYMCG");
		 usuarioBean.setLogin("10084475951PEHFYMCG");
	

obtener idCache QA
https://e-plataformaunica.sunat.gob.pe/servletAcceso?plataforma=desktop&rucUsuario=20100049181PEHFYMCG&password=12345678&tipoOperacion=4&idFormulario=01&recurso=/plataformaUnica
 
Metricas
http://localhost:17109/metrics?pretty=true

dbeaver
select CAST(arc_data::json AS LVARCHAR)  arc_data,* from informix.t7777bandprespago where num_bandeja = 1004076085


pe.gob.sunat.recauda.pago.decl.PagoDeclServlet
		procesa
			realizarPago
				pagarPorCargoCuenta

pe.gob.sunat.recauda.pago.decl.ejb.delegate.PagoDeclDelegate			
		realizarPagoCargo
pe.gob.sunat.recauda.pago.decl.ejb.PagoDeclFacade	
		realizarPagoCargo
pe.gob.sunat.servicio.declpago.pago.ejb.PagoFacade
		pagoTransaccional
pe.gob.sunat.servicio.declpago.pago.pattern.strategy.PagoTransaccional
		pagar
		
 pe.gob.sunat.recauda.pago.decl.ejb.PagoDeclFacade
		insertarRegistroPago
		
obtenerLogTrana

consola
gradlew.bat cleanIdea idea



159
/etc/nginx

PresentacionUtil.obtenerMensaje("uno", null, "dos")

parametria Pasarela

Listar pasarela
		factoriaPasarela

Nuevo
		factoriaAplicativo


JPA - ECLIPSE LINK

			<property name="eclipselink.cache.shared.default" value="false"/>
			<property name="eclipselink.logging.level.sql"   value="FINE" />
			<property name="eclipselink.logging.parameters"  value="true"/>		
			
			
Sequence Pago Visa			
//SEDECDET0686    // Final   SEDECDET0000			
			
REDIS

ssh root@192.168.251.37
 redis-cli -h 192.168.251.38 -p 16041 -a Sapia123		

 ssh root@192.168.247.25
 redis-cli -h 192.168.247.25 -p 16042 -a Sapia123		


 keys * 			
 get {key}
rladmin status

redis-server

redis> SET key2 "World"
"OK"
redis> DEL key1 key2 key3

redis-cli
redis-cli ping
FLUSHALL

VPN
https://148.102.17.108

User: christian
linuxeros
openvpn --config client.ovpn


TTL "/cache/pasarelaHoraEntidadFinanciera/5"  // de vuelve en segundos

Plataforma QA
https://e-plataformaunica.sunat.gob.pe/login1.html

https://e-plataformaunica.sunat.gob.pe/servletAcceso?plataforma=desktop&rucUsuario=20314548249CNAVARRO&password=12345678&tipoOperacion=4&idFormulario=01&recurso=/plataformaUnica?​


Ruta de Scripts
smb://192.168.1.192/sunat/2-Ingnria/2.4%20Ambientes/PreProduc/DocumentosPase/BasedeDatos/Scripts_BD_20171201

reiniciar jenkins
sudo /etc/init.d/jenkins restart

los servidores de MQ son:
192.168.251.32
192.168.251.33
Normalmente ejecutamos:
watch "runmqsc < vercolas.txt"
Para ver el estado de las colas.

strmqcfg para desplegar la interfaz del MQ Explorer


SELECT first 50  * FROM informix.t7777bandprespago WHERE ind_pag_rea='1'
--AND num_ope_pag is null AND num_nps_pag is null AND mto_pagar > 0
--AND bson_value_int(arc_data, "formulario.0.numOrd") = 0
AND DATE(fec_regis) =   DATE('2017/12/21')
GO


SELECT * FROM t7777bandprespago WHERE num_ruc=$(ruc) AND fec_ope>=today-8;


	@SuppressWarnings("unchecked")
	public List<Long> obtenerBandejasConError(String fechaDesde) throws Exception {
		StringBuilder stringBuilder = new StringBuilder();
		List<Long> listaBandejas;
		stringBuilder.append(" select b.num_bandeja from t7777bandprespago b ")
				.append("  left outer join t7794procesoband p on b.num_bandeja = p.num_bandeja ")
				.append("  where p.cod_pro_ban = '0002' and p.ind_pro_ban = '0' ")
//				.append("  and TO_CHAR(b.fec_ope, '%Y%m%d')>='" + fechaDesde + "' ");

		Query query = this.createNativeQuery(stringBuilder.toString());
		listaBandejas = (List<Long>) query.getResultList();

		return listaBandejas;
	}

	If we ignored Disk and Network it would be simple. On a server with 8 computing cores, setting the number of connections to 8 would provide optimal performance, and anything beyond this would start slowing down due to the overhead of context switching.

	During this time ("I/O wait"), the connection/query/thread is simply "blocked" waiting for the disk. And it is during this time that the OS could put that CPU resource to better use by executing some more code for another thread. So, because threads become blocked on I/O, we can actually get more work done by having a number of connections/threads that is greater than the number of physical computing cores.

The Formula
The formula below is provided by the PostgreSQL project as a starting point, but we believe it will be largely applicable across databases. You should test your application, i.e. simulate expected load, and try different pool settings around this starting point:

connections = ((core_count * 2) + effective_spindle_count)

Guess what that means? Your little 4-Core i7 server with one hard disk should be running a connection pool of: 9 = ((4 * 2) + 1). Call it 10 as a nice round number. Seem low? Give it a try, we'd wager that you could easily handle 3000 front-end users running simple queries at 6000 TPS on such a setup. If you run load tests, you will probably see TPS rates starting to fall, and front-end response times starting to climb, as you push the connection pool much past 10 (on that given hardware).


formulario igv
            UsuarioDdpBean ub = new UsuarioDdpBean();
            ub.setCodDepend("0063");  // 0063 0073
            ub.setNumRUC("20314548249");  //20314548249  20100049181
            ub.setUsuarioSOL("CNAVARRO");
            ub.setLogin("10084475951PEHFYMCG");

        String ubigeo = "130101"; //// usuarioBean.getMap2().getDdpData().getDdp_ubigeo();
        String tamanioContribuyente = "0063"; ////usuarioBean.getMap2().getDdpData().getDdp_numreg();
            
/v1/recaudacion/tributaria/t/formularioIgv/obtenerDatosPeriodo/0621/201705            

/v1/recaudacion/tributaria/t/formularioIgv/determinarFormaDeclaracionHystrix/original/201705/true

data = t01paramDAO.onCommand( dao-> t01paramDAO.obtenerUIT(fecha), f -> caer()) ;

//        return t7777bandprespagoDAO.onCommand( dao -> {
////			try {
////				Thread.sleep(2000);
////			} catch (InterruptedException e) {
////				e.printStackTrace();
////			}
//            return dao.findById(numBandeja);
//        });


data = t01paramDAO.onCommand( dao-> t01paramDAO.obtenerUIT(fecha)) ;
                formularioIgvCache.saveUITconfigCache(data);

            ves = vesDAO.onCommand( dao -> {
                try {
                    return vesDAO.getFechaVencimiento(numRuc, periodo, codTributoAsociado);
                } catch (Exception ex) {
                    this.utilLog.imprimirLog(ConstantesUtils.LEVEL_ERROR, "metodo: getFechaVencimiento --->" + ex.getMessage(), Thread.currentThread().getStackTrace());
                    return null;
                }
            });


this.utilLog.imprimirLog(ConstantesUtils.LEVEL_ERROR, UtilLog.getStackTraceFromException(e), Thread.currentThread().getStackTrace());   